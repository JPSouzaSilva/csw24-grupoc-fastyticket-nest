generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-1.1.x", "rhel-openssl-1.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  tenantId               String        @id @default(uuid())
  name                   String
  contactInfo            String?
  paymentPreference      String?
  notificationPreference Boolean
  users                  User[]
  events                 Event[]
  tickets                Ticket[]
  transactions           Transaction[]

  @@map("tenant")
}

model User {
  userId                  String                   @id @default(uuid())
  tenantId                String
  tenant                  Tenant                   @relation(fields: [tenantId], references: [tenantId])
  verified                String                   @unique @default(uuid())
  name                    String
  email                   String
  role                    String
  balance                 Float                    @default(0)
  rate                    Int?
  soldTickets             Ticket[]                 @relation("sellerTickets")
  boughtTransactions      Transaction[]            @relation("buyerTransactions")
  notificationPreferences NotificationPreferences?

  @@map("user")
}

model Event {
  eventId   String   @id @default(uuid())
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [tenantId])
  eventName String
  onwerId   String
  type      String
  location  String
  dateTime  DateTime
  tickets   Ticket[]

  @@map("event")
}

model Ticket {
  ticketId    String       @id @default(uuid())
  eventId     String
  event       Event        @relation(fields: [eventId], references: [eventId])
  tenantId    String
  tenant      Tenant       @relation(fields: [tenantId], references: [tenantId])
  price       Float
  sellerId    String
  seller      User         @relation("sellerTickets", fields: [sellerId], references: [userId])
  code        String
  status      String
  description String?
  transaction Transaction?

  @@map("ticket")
}

model Transaction {
  transactionId     String   @id @default(uuid())
  tenantId          String
  tenant            Tenant   @relation(fields: [tenantId], references: [tenantId])
  buyerId           String
  buyer             User     @relation("buyerTransactions", fields: [buyerId], references: [userId])
  ticketId          String   @unique
  ticket            Ticket   @relation(fields: [ticketId], references: [ticketId])
  price             Float
  transactionDate   DateTime
  transactionStatus String

  @@map("transaction")
}

model NotificationPreferences {
  preferencesId String  @id @default(uuid())
  userId        String  @unique
  user          User    @relation(fields: [userId], references: [userId])
  receiveEmails Boolean

  @@map("notification_preferences")
}
